:coffeescript
  root = exports ? this
  class Item
    constructor: (@id, @name) ->

    update_values: (volume, avg, max, min, stddev, median, percentile) ->
      @volume = parseFloat(volume)
      @avg = parseFloat(avg)
      @max = parseFloat(max)
      @min = parseFloat(min)
      @stddev = parseFloat(stddev)
      @median = parseFloat(median)
      @percentile = parseFloat(percentile)

  root.classify = (name) ->
    return name.toLowerCase().replace /\s+/g, '-'

  root.format_values = ->
    $.extend accounting.settings.number,
      precision: 2

    $.each $('tbody td'), (i, td) ->
      values = $(td).text().replace /([\d\.]+)/g, (a, b) ->
        accounting.formatNumber( b )
      $(td).text( values )

  root.fetch_prices = (url, callback) ->
    $.ajax
      url: url
      dataType: 'json'
      cache: true
      success: (data) ->
        type_ids = $.map(data, (item) ->
          "typeid=" + item.id
        ).join("&")

        items = $.map(data, (item) ->
          new Item item.id, item.name
        )

        jita_url = "http://api.eve-central.com/api/marketstat?" + "regionlimit=10000002&" + type_ids
        $.ajax
          type: "GET"
          url: jita_url
          dataType: "xml"
          cache: true
          success: (market_data) ->
            $.each items, (index, item) ->
              vol = $(market_data).find("evec_api > marketstat > type#" + item.id + " > buy > volume").text()
              avg = $(market_data).find("evec_api > marketstat > type#" + item.id + " > buy > avg").text()
              max = $(market_data).find("evec_api > marketstat > type#" + item.id + " > buy > max").text()
              min = $(market_data).find("evec_api > marketstat > type#" + item.id + " > buy > min").text()
              std = $(market_data).find("evec_api > marketstat > type#" + item.id + " > buy > stddev").text()
              med = $(market_data).find("evec_api > marketstat > type#" + item.id + " > buy > median").text()
              per = $(market_data).find("evec_api > marketstat > type#" + item.id + " > buy > percentile").text()
              item.update_values(vol, avg, max, min, std, med, per)

              $.each $('td.'+ classify(item.name)), (i, cell) ->
                quantity = parseFloat($(cell).find('div.input').text().replace(/units?/, ''))
                gross = (quantity * item.max).toFixed(2)
                $(cell).text('') if !$('table').hasClass('table-reactions')
                $(cell).append $('<div>').addClass('buy max').text( gross )

              $('thead th:gt(1)').width(100)

            callback.call() if callback

    return true
